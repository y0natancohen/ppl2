(define empty?
   (lambda (lst)
        (eq? lst '())
  )
)

(define list?
    (lambda (lst)
       (if (empty? lst)
           #t
           (if (pair? lst)
                (list? (cdr lst))
                #f
           )
       )
    )
)

@TODO: not working :(
(equal-list? '(#t "a" (2 'b)) '(#t "a" (2 'b)))

(define equal-list?
    (lambda (lst1 lst2)
       (if (and (list? lst1) (list? lst2))
            (if (and (empty? lst1) (empty? lst2))
                #t
                (if (or (and (empty? lst1) (not (empty? lst2)))
                        (and (empty? lst2) (not (empty? lst1))))
                    #f
                    (if (eq? (car lst1) (car lst2))
                        (equal-list? (cdr lst1) (cdr lst2))
                        #f
                     )
                )
            )
           #f
       )
    )
)

(define append
  (lambda (lst1 lst2)
    (if (empty? lst1)
        lst2
        (cons (car lst1) (append (cdr lst1) lst2))
        )
    )
  )

(define append3
  (lambda (lst1 lst2 num)
   (if (empty? lst1)
           (if (empty? lst2)
               (cons num '())
               (cons (car lst2) (append3 lst1 (cdr lst2) num)))
           (cons (car lst1) (append3 (cdr lst1) lst2 num)))
    )
)

(define pascal
  (lambda (n)
     @TODO
  )
)
